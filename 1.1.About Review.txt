목차
1장 코드리뷰
 1.1 코드리뷰 소개.
 1.2 Gerrit을 선택한 이유.
 1.3 코드리뷰 도구들.

1장 코드리뷰
1.1 리뷰 소개.
코드 리뷰란 누군가(Author)가 만든 소스 코드를 다른 사람들(Reviewers)이 직접 보면서 결함이나 문제점을 찾아내는 활동을 말한다.
일반적인 소프트웨어 테스트로(단위테스트, 통합테스트, 인수테스트 등) 발견하기 힘든 결함을 비교적 쉽게 초기에 발견할 수 있기 때문에 성공적으로 도입했을 경우 큰 효과가 있는 것으로 알려져 있다. 또한 기능상의 결함이 아닌 비기능적 요구사항에 대한 문제점(성능에 유리한 설계인지, 읽기 쉽게 작성되어 있는지, 테스트하기는 쉬운지 등)도 찾을수 있다. 또, 코드 리뷰를 하게되면 저자는 보다 신경써서 코드를 작성하게 되고 리뷰어와 여러가지 의견들을 교환하면서 자연스럽게 지식이 공유되는 효과도 얻을수 있다. 궁극적으로는 코드의 품질도 높아지고 개발자의 질도 높아지는 부수적인 효과까지 얻을수 있다.
결함을 효과적으로 찾아내면서 부수적인 효과로 코드품질도 높아지고 개발자의 실력도 향상되는 활동이라면 이건 무조건 해야 하는거다. 하지만 왜 안할까? 그만큼 제대로 적용하기는 힘들다는 이야기다.
지금부터 몇가지 대표적인 코드리뷰 방법에 대해 알아보고 성공적으로 적용하기 힘든 장애요소는 무엇인지 알아보도록 하겠다.

코드리뷰를 하는 방법에는 여러가지가 있는데 실행 방법에 따라 잘 계획된 코드리뷰, 간단한 코드리뷰 그리고  짝 프로그래밍 세가지로 구분할수 있다.
잘 계획된 코드리뷰는 리뷰할 코드 선정방법부터 참가자들의 역할 완료조건 등을 정의하여 계획하에 코드를 리뷰하는 방법이다. 대표적인 방법은 Michael Fagan이 1976년 논문으로 소개한 Code Inspection 이다. Inspection은 당시 IBM에 적용되어 결함 예방에 큰성과가 있었다는 연구 결과가 있었고 이후 여러곳에서 유사한 성과를 냈다. 1997년에는 Software reviews 표준 방법 중의 하나가 된다.(참조:IEEE Std 1028-1997, Standar for Software Reviews) 일반적으로 코드 리뷰라고 하면 Code Inspection을 일컫는 경우가 많다. 필자도 코드리뷰 하면 Code Inspection을 가장 먼저 떠올리게 된다.
Inspection 목적은 소프트웨어의 결함을 찾는데 있다. 따라서 가능한 많은 결함을 찾기위한 행동 지침들이 강조하고 있다.
예를 들면 다음과 같은 내용이다.
체크리스트는 과거에 문제가 있었던 영역에 대해 리뷰어가 관심을 갖도록 하라.
리뷰어는 결함을 어떻게 수정할지에 대해서는 저자에게 맡기고 오로지 결함 발견에만 집중한다.
Inspection에서 참여자의 역할은 다음과 같이 정의한다.
* Inspection leader
moderator 라고도 부른다. Inspection을 계획하고 참여자들을 구성하며 절차를 조율 하는 등, 원하는 Inspection 결과가 나올수있도록 총괄하는 역할을 하는 사람이다. 코드에 대한 전문가일 필요는 없지만 기능 요구사항에 대한 세부사항들을 자 이해하고 있어야 한다.
* Recorder
Inspection 중에 발견된 결함과 조치사항들을 기록하는 역할이다. 작성자나 리더는 Recorder가 되어서는 안된다.
* Reader
Inspection 회의에서 참여자들이 이해하기 쉽게 코드를 읽어주는 역할을 한다. 주로 Author가 담당하게 된다.
* Author
코드를 작성한 사람이다.
* Inspector
리뷰어를 말하며 결함을 찾아내는 역할이다. 검토자는 리뷰할 코드를 미리 읽어보고 와야 한다.
최소 3명이상의 참여자가 있어야 한다. 전통적으로 Code Inspection은 참여인원을 6명으로 제한한다. 이보다 많으면 관리가 힘들어지고 결함을 찾는데 오히려 방해가 될수 있기 때문이다.

일반적인 절차는 다음과 같다.
* 계획 Planning the inspection
저자는 Inspection 대상 코드를 리더에게 전닳나다. 리더는 inspection 팀을 구성하고 회의 일정을 조율한다. 대상 코드와 사전 체크리스트를 배포한다.
소스코드는 시간당 100~200라인 분량을 추천한다.
* 개요 Overview
Inspection 절차와 대상에 대한 overview를 실시한다.
* 준비 Preparation
각 검토자는 체크리스트를 이용하여 미리 리뷰할 코드를 살펴봐야 한다. Reader는 리뷰할 코드를 어떻게 읽는게 좋을지 고민해야 한다. 리더는 각 검토자들이 코드를 충분히 살펴보고 회의에 참석할 준비가 되었는지 체크한다.
* 회의 Examination
Reader는 리뷰할 코드를 설명하고 리뷰어는 결함을 찾아 이야기하고 기록자는 그 결함을 기록한다. 리뷰를 마치면 기록된 결함들을 다시한번 살펴보고 결함을 확정한다. 결함을 할당하고 회의를 종료한다.
* Rework/follow-up
Author는 발견될 결함을 해결하고 inspection leader는 해결된 내용을 확인한다.

리뷰를 통해 발견된 결함이 모두 수정되고 참여자들이 확인을 마치면 Inspection은 완료조건을 충족하게된다. 
Inspection을 통해 나온 데이터들을 정리하는 것도 큰 도움이 된다. 결함을 모아서 정의하고 분류하여 의미있는 데이터로 만들어(예를 들면 결함 순위?) 다음 Inspection의 기초자료로 활용할수 있다.

사내에서 코드리뷰를 직접해본 사람들도 있고 책으로만 접해본 사람들도 있겠지만 Inspection은 두가지 단점이 있다.
첫번째는 어렵다는 것이다. 좋은 줄 알겠는데 잘하기는 너무나 어렵다. 구성원중 한사람만 역할을 잘못 수행하면 리뷰회의는 쉽게 망가지고 만다. 불행하게도 주변에 그런사람이 꼭 있다. 리뷰는 코드의 결함을 찾는 행위임에도 불구하고 어떤 리뷰어는 저자의 결함을 지적하여 자존심에 상처를 입히기도 하고, 자신이 찾은 결함을 어떻게 해결해야하는지에 대해서 토론하느라 쓸데없이 시간을 낭비하기도 하고, 결함을 마치 자신의 자존심인것처럼 얼굴붉히며 방어하는 저자도 있다. 이런 참가자가 있으면 리뷰회의는 순식간에 시간낭비가 되어버리게 되고 서로 비난하는 분위기가 형성되면서 결국에는 아무도 결함을 발견하지 못하는 상태에 이르게된다.
물론 그럼에도 불구하고 전혀 효과가 없지는 않다. 비록 중대한 결함을 발견하지는 못하더라도 저자는 신경써서 개발을 진행하게되고 기본적인 결함(오타, 코딩 컨벤션 위배 등)은 수정될 수 있고, 서로의 지식을 공유하게되는 순작용은 일어나게된다. 하지만 이런 작은(정성적) 효과는 두번째 단점에 의해 빛을 잃게된다.
두번째 단점은 비용이 많이 든다는 것이다.
응용프로그램의 예를 드면 시간당 리뷰할수 있는 분량이 500라인 정도이다. 보통의 개발자가 맘먹고 만들면 반나절이면 생산해 낼수 있는 코드량이다. 한사람이 반나절 작업한 코드를 리뷰하기 위해 5~6명이 준비하고 리뷰회의하고 정리하고 하는 시간은 각자 반나절 이상 투자해야만 한다. 반나절이라고 가정하더라도 한사람이 반나절동안 개발한 코드를 5~6명이 각각 반나절동안 리뷰를 한다는 이야기다. 코드를 생산한 5~6배의 시간을 투자하여 기본적이 결함을 수정하고, 부족한 개발자의 지식을 채워주는 효과는 확실히 손해보는 장사다.
Inspection이 정착되지 못하는 가장 큰 이유는 두번째 비용이 많이 들기때문일것이다. 대부분의 결정권자들은 코드를 생산하는데 모든 비용을 집중하고 싶어 하기 때문에 아무리 효과가 크다고 하더라도 Inspection에 드는 비용을 감당하고 싶어 하지 않으려는 경향이 있다.
Inspection이 성공하기 위해서는 조직의 역량이 뒷받침되어야 한다. 허접한 조직에서는 실행하려고 하지도 않을 뿐더러 실행하더라도 그 효과를 얻기가 힘들다.

그 대안으로 다루는 기법들이 있다.
좋다고 하니 하고는 싶은데 비용은 많이 들이고 싶지 않은 이유로 나온 것들이다. 느슨한 기준으로 유연하게 적용할수 있다. 목적 자체도 결함을 찾는 것보다는 부수적 효과에 오히려 촛점이 맞춰져 있다.
대표적인 격식없는 리뷰방법인 워크쓰루의 경우 결함 발견보다는 코드에 대한 피드백을 받고, 해당 코드의 내용을 서로 공유하는데 더 촛점을 두게 된다. 필자는 코드의 결함을 다루는 것이 그만큼 어렵기 때문이라고 생각한다.

코드리뷰의 범주에 넣기가 애매하긴 하지만 짝 프로그래밍이라는 것도 있다
짝프로그래밍은 두명의 개발자가 한 컴퓨터를 사용해서 한 명은 개발자(drive)로 한 명은 항해사(navigator)로 역할을 맡아 짝을 이뤄 개발하는 방법을 말한다. Extreme Programming에서 알려진 실천법인데 지금은 Agile 개발방법론의 실천법으로 보다 널리 사용되고 있다.

Drive가 개발을 하는 동안 Navigator는 코드의 결함을 찾기도 하고 개발자가 모르는 부분을 찾아 조언을 하기도 하고 
두사람의 역할은 가능한 자주 바꾸도록 가이드하고 있는데 항해사의 역할을 하는 친구는 드라이브의 코드를 실시간으로 리뷰하고 있는셈이 된다.
형식적 코드리뷰는 블라블라.. Inspection
비형식적 코드리뷰는 블라블라.. 워크쓰루, 
기법 비교



공식적인 리뷰 비공식적인 리뷰로 구분하며 공식적인 리뷰는 다음과 
코드리뷰에 대한 연구의 결정판은 IEEE Std 1028-1977, Standard for Software Reviews 이며 2008년 개정판까지 나와있다.
IEEE 1028 standard에 따르면 리뷰의 종류로 아래 다섯가지를 정의하고 있다.
Management reviews
Technical reviews
Inspections
Walk-throughs
Audits

리뷰는 여러가지 방법으로 진행될수 있다. 애자일 개발방법론에서 나오는 pair programming도 리뷰의 한가지 방법으로 보기도 한다. IEEE 1028 standard에서 Inspection, Walk throughs

동적 테스트를 통해서 버그를 발견하게되면 디버깅을 통해 그 원인을 찾아야 한다. 하지만 정적 테스트는 곧바로 그 원인을 찾아내게된다. 따라서 동적테스트로 발견하기 불가능한 버그도 찾아낼수가 있다.

또한 부수적인 효과들도 많은데 작성자는 코드를 훨씬 신경 써서 작성하게 되고, 작성자와 리뷰어들 간에 자연스럽게 서로의 지식을 공유하게 되며, 궁극적으로는 코드의 품질도 높아지게 된다.

많은 사람들이 리뷰를 통해 얻게되는 좋은 경험들은 주 목적인 결함의 조기 발견보다는 부수적 효과에 있는 치우치는 경향이 있다. 역설적으로 코드리뷰라는 활동은 부수적효과만 얻더라도 충분히 해볼만한 활동이라는 이야기다. 
필자는 그 이유가 코드리뷰가 그많큼 어렵기때문이라고 생각한다.

코드리뷰는 어렵다. 코드리뷰는 비용이 많이 든다.
따라서 보다 쉽게 해줄수 있는 방법이 필요하다. 또 비용을 줄일수 있는 방법이 필요하다.
그래서 여러가지 메뉴얼들이 등장하게 되고 또 도구들이 등장하게 되었다.

코드리뷰는 초기에 만든 코드를

필자가 
하지만 실상은 차이가 많다. 필자도 신규 프로젝트를 할 때 반드시 코드리뷰를 하는 편인데 위에서 기술되었던 모든 부수적인 효과가 발생되는 경우는 단 한번도 없었다. 가이드로 삼을 수 있는 표준 코드를 공유하고, 신입개발자들의 코드를 보면서 교육하는 정도의 효과가 있을 뿐이었다. 물론 그 효과도 프로젝트를 성공적으로 마무리하는데 큰 도움이 되긴 했다. 코드의 품질이 높아지는 단계까지 가기 위해서는 넘어야 할 산이 너무 높았다.
왜 그랬을까? 리뷰문화, 높은 비용.
우리 회사에서도 코드리뷰가 정례화 된 조직을 들여다보면 대부분 미숙한 개발자들이 짠 코드를 대상으로 교육처럼 코드리뷰가 시행된다. 즉 결함투성이인 코드들을 보면서 교육을 하는 경우다. 작성자가 미처 생각지 못한 부분을 리뷰하는게 아니라 잘 모르는 개발자에게 모르는 부분을 알려주는 리뷰가 주가 되는 경우다.
일방적인 훈계를 하늘 코드리뷰는 미숙한 개발자들이 짠 코드를 대상으로 하게되며, 리뷰어들은 리뷰준비도 미숙한 코드들을 보고 미숙한 개발자들을 공개적으로 혼내는 
필자는 코드리뷰의 중요성을 잘 알고 있었기에 프로젝트를 할 때마다 초반에는 집단 코드리뷰를 매일 한 시간씩 필수로 했다. 필자의 코드도 포함하여 돌아가면서 코드리뷰를 하기는 했지만 실상은 필자의 코드 같은 경우 마치 예제코드로서 구성원에게 제공되는 코드였다. 필자의 코드는 리뷰 하면서 결함이 나온 적이 한번도 없었다. 필자가 어마어마한 개발자라서 그런 건 절대 아니고 이유는 구성원에게 제공되는 표준 예제코드 였기때문이다. 그리고 코드리뷰가 계속 진행되면 문제있는 개발자의 코드만 계속 리뷰대상이 되었다. 그리고 프로젝트 후반이되면 코드리뷰는 할시간이 없어서 생략되었다.

하지만 이 모든 효과는 잘되었을 경우에만 얻을 수 있다. 잘 못하는 경우에는 생각보다 심각한 결과를 초래할 수도 있다. 특히 토론에 익숙하지 않은 우리나라의 경우 리뷰회의를 통해서 누군가를 비난하거나 스스로 비난 받고 있다고 생각하기 쉬운데 이렇게 되면 리뷰회의는 모두에게 엄청난 스트레스로 다가오게 된다. 작성자는 코드를 만들면서 리뷰어를 의식하게 되고, 리뷰어는 작성자의 코드를 섣부르게 지적할 수 없어 스트레스를 받는다. 리뷰어가 참을 수 없는 문제를 발견하고 지적하는 날에는 서로 또 싸우며 상처 주는 말들을 주고 받는다. 작성자는 더 이상 코드 짜는 게 더 이상 재미있지 않게 된다. 참석한 다른 리뷰어들은 소모적인 논쟁을 지켜보며 시간 낭비를 하게 된다.
이런 일들은 생각보다 자주 일어난다. 여러 명이 모여서 하는 코드리뷰에서 한 사람만 잘못하더라도 위와 같은 일이 발생될 수 있기 때문이다. 우리 주변에는 생각보다 그런 사람이 많다. 우리회사에서 QP 활동을 정의할 때 코드리뷰를 강제화하지 않은 이유가 바로 이것이다.
이처럼 코드리뷰는 큰 효과가 있음에도 불구하고 성공적으로 도입하기는 쉽지 않은데 필자는 그 이유를 크게 두 가지로 보고 있다. 첫 번째는 코드리뷰가 원래 어려워서 이다. 두 번째는 코드리뷰는 많은 시간을 필요로 한다.
첫 번째는 위에서 언급한 것처럼 리뷰 하는 방법을 잘 몰라서이다. 
두 번째는 코드리뷰는 시간이 많이 소요되는 작업이기 때문이다.
코드리뷰는 사실 엄청난 시간이 소요되는 작업이다. 코드 인스펙션 기법을 예를 들면 한사람의 코드를 리뷰하기 위해 리뷰어는 리뷰대상 코드를 선정하여 리뷰어들에게 미리 공유를 하고 리뷰어는 리뷰대상 코드를 이해하기 위해 시간을 들여야 하며 실제 리뷰회의에도 참석하여 1~2시간동안 코드를 리뷰 해야 한다. 여기다 리뷰를 주관하는 사람도 필요하고 기록하는 사람도 필요하고. 리뷰어가 3명이라고 하면 참여하는 사람만 6명이고 이사람들이 각각 반나절을 코드리뷰에 시간을 소비하게 된다.

신입 사원이 만드는 코드, 신규 입사자가 만드는 코드, 복잡한 코드 등에 한해서만 코드리뷰를 강제화하도록 규칙을 정했다.

코드리뷰를 조직에 적용하기 위해서는 조직의 역량이 높아져야 하는데 교육만으로는 코드리뷰를 잘 할 수 있을 만큼 역량을 높이는 것이 불가능하다. 그렇다고 강제화하기에는 코드리뷰에 비용이 너무 커서 

1.1 코드리뷰 소개
Five types of software reviews and audits
