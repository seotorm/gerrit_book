1장 코드리뷰란
코드리뷰란 누군가가 짠 코드를 다른 사람들이 직접 보면서 결함이나 문제점을 찾아내는 활동을 말한다. 일반적인 소프트웨어 테스트로(단위테스트, 통합테스트, 인수테스트 등) 발견하기 힘든 결함을 비교적 쉽게 초기에 발견할 수 있기 때문에 잘만하면 큰 효과를 얻을 수 있다. 또한 부수적인 효과들도 많은데 작성자는 코드를 훨씬 신경 써서 작성하게 되고, 작성자와 리뷰어들 간에 자연스럽게 서로의 지식을 공유하게 되며, 궁극적으로는 코드의 품질도 높아지게 된다.
하지만 실상은 차이가 많다. 필자도 신규 프로젝트를 할 때 반드시 코드리뷰를 하는 편인데 위에서 기술되었던 모든 부수적인 효과가 발생되는 경우는 단 한번도 없었다. 가이드로 삼을 수 있는 표준 코드를 공유하고, 신입개발자들의 코드를 보면서 교육하는 정도의 효과가 있을 뿐이었다. 물론 그 효과도 프로젝트를 성공적으로 마무리하는데 큰 도움이 되긴 했다. 코드의 품질이 높아지는 단계까지 가기 위해서는 넘어야 할 산이 너무 높았다.
왜 그랬을까? 리뷰문화, 높은 비용.
우리 회사에서도 코드리뷰가 정례화 된 조직을 들여다보면 대부분 미숙한 개발자들이 짠 코드를 대상으로 교육처럼 코드리뷰가 시행된다. 즉 결함투성이인 코드들을 보면서 교육을 하는 경우다. 작성자가 미처 생각지 못한 부분을 리뷰하는게 아니라 잘 모르는 개발자에게 모르는 부분을 알려주는 리뷰가 주가 되는 경우다.
일방적인 훈계를 하늘 코드리뷰는 미숙한 개발자들이 짠 코드를 대상으로 하게되며, 리뷰어들은 리뷰준비도 미숙한 코드들을 보고 미숙한 개발자들을 공개적으로 혼내는 
필자는 코드리뷰의 중요성을 잘 알고 있었기에 프로젝트를 할 때마다 초반에는 집단 코드리뷰를 매일 한 시간씩 필수로 했다. 필자의 코드도 포함하여 돌아가면서 코드리뷰를 하기는 했지만 실상은 필자의 코드 같은 경우 마치 예제코드로서 구성원에게 제공되는 코드였다. 필자의 코드는 리뷰 하면서 결함이 나온 적이 한번도 없었다. 필자가 어마어마한 개발자라서 그런 건 절대 아니고 이유는 구성원에게 제공되는 표준 예제코드 였기때문이다. 그리고 코드리뷰가 계속 진행되면 문제있는 개발자의 코드만 계속 리뷰대상이 되었다. 그리고 프로젝트 후반이되면 코드리뷰는 할시간이 없어서 생략되었다.

하지만 이 모든 효과는 잘되었을 경우에만 얻을 수 있다. 잘 못하는 경우에는 생각보다 심각한 결과를 초래할 수도 있다. 특히 토론에 익숙하지 않은 우리나라의 경우 리뷰회의를 통해서 누군가를 비난하거나 스스로 비난 받고 있다고 생각하기 쉬운데 이렇게 되면 리뷰회의는 모두에게 엄청난 스트레스로 다가오게 된다. 작성자는 코드를 만들면서 리뷰어를 의식하게 되고, 리뷰어는 작성자의 코드를 섣부르게 지적할 수 없어 스트레스를 받는다. 리뷰어가 참을 수 없는 문제를 발견하고 지적하는 날에는 서로 또 싸우며 상처 주는 말들을 주고 받는다. 작성자는 더 이상 코드 짜는 게 더 이상 재미있지 않게 된다. 참석한 다른 리뷰어들은 소모적인 논쟁을 지켜보며 시간 낭비를 하게 된다.
이런 일들은 생각보다 자주 일어난다. 여러 명이 모여서 하는 코드리뷰에서 한 사람만 잘못하더라도 위와 같은 일이 발생될 수 있기 때문이다. 우리 주변에는 생각보다 그런 사람이 많다. 우리회사에서 QP 활동을 정의할 때 코드리뷰를 강제화하지 않은 이유가 바로 이것이다.
이처럼 코드리뷰는 큰 효과가 있음에도 불구하고 성공적으로 도입하기는 쉽지 않은데 필자는 그 이유를 크게 두 가지로 보고 있다. 첫 번째는 코드리뷰가 원래 어려워서 이다. 두 번째는 코드리뷰는 많은 시간을 필요로 한다.
첫 번째는 위에서 언급한 것처럼 리뷰 하는 방법을 잘 몰라서이다. 
두 번째는 코드리뷰는 시간이 많이 소요되는 작업이기 때문이다.
코드리뷰는 사실 엄청난 시간이 소요되는 작업이다. 코드 인스펙션 기법을 예를 들면 한사람의 코드를 리뷰하기 위해 리뷰어는 리뷰대상 코드를 선정하여 리뷰어들에게 미리 공유를 하고 리뷰어는 리뷰대상 코드를 이해하기 위해 시간을 들여야 하며 실제 리뷰회의에도 참석하여 1~2시간동안 코드를 리뷰 해야 한다. 여기다 리뷰를 주관하는 사람도 필요하고 기록하는 사람도 필요하고. 리뷰어가 3명이라고 하면 참여하는 사람만 6명이고 이사람들이 각각 반나절을 코드리뷰에 시간을 소비하게 된다.

신입 사원이 만드는 코드, 신규 입사자가 만드는 코드, 복잡한 코드 등에 한해서만 코드리뷰를 강제화하도록 규칙을 정했다.

코드리뷰를 조직에 적용하기 위해서는 조직의 역량이 높아져야 하는데 교육만으로는 코드리뷰를 잘 할 수 있을 만큼 역량을 높이는 것이 불가능하다. 그렇다고 강제화하기에는 코드리뷰에 비용이 너무 커서 

1.1 코드리뷰 소개
Five types of software reviews and audits
